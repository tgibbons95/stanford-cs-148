name: CI-CD

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: "Build ${{ matrix.platform }} in ${{ matrix.build_type }}"
    strategy:
      matrix:
        platform: [windows, ubuntu, macos]
        build_type: [Release, Debug]
    env:
      PARALLEL: -j 2
    runs-on: "${{ matrix.platform }}-latest"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - if: ${{ matrix.platform == 'ubuntu' }}
      name: Install Linux Dependencies
      run: |
          sudo apt-get update
          sudo apt install xorg-dev libglu1-mesa-dev
          sudo apt install lcov

    - name: Checkout Submodule
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: "Build ${{ matrix.platform }} in ${{ matrix.build_type }}"
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: "Install ${{ matrix.platform }} in ${{ matrix.build_type }}"
      working-directory: ${{github.workspace}}/build
      run: cmake --install . --prefix ${{github.workspace}}/build/install --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build_type }} --output-junit ${{github.workspace}}/build/test-report.xml

    - if: ${{ matrix.build_type == 'Release'}}
      name: "Archive Install ${{ matrix.platform }}-${{ matrix.build_type }}"
      uses: actions/upload-artifact@v2
      with:
        name: "${{ matrix.platform }}-${{ matrix.build_type }}"
        path: ${{github.workspace}}/build/install
        
    - if: ${{ matrix.platform == 'ubuntu' && matrix.build_type == 'Release'}}
      name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-report
        path: ${{github.workspace}}/build/test-report.xml

    - if: ${{ matrix.platform == 'ubuntu' && matrix.build_type == 'Debug'}}
      name: Code Coverage
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        mkdir ${{github.workspace}}/build/code-coverage
        lcov --capture --directory . -o tmp_coverage.info 
        lcov --remove tmp_coverage.info -o ${{github.workspace}}/build/code-coverage/main_coverage.info '/usr/lib/*' '/usr/include/*' '*external_src/*' '*test/*'
        genhtml ${{github.workspace}}/build/code-coverage/main_coverage.info -o ${{github.workspace}}/build/code-coverage/coverage --function-coverage --demangle-cpp --no-sort --title "CS 148 Introduction to Computer Graphics and Imaging Test Results"

    - if: ${{ matrix.platform == 'ubuntu' && matrix.build_type == 'Debug'}}
      name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: ${{github.workspace}}/build/code-coverage